library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

Entity RAC_extender IS Port
 clk_input, rst_n, extender_toggle, extender_enabled		: IN std_logic;
 extender_output, output2	 										: OUT std_logic
 );
END ENTITY;
 

 Architecture circuit of RAC_extender is
 
 --
-- Provided Project Components Used
------------------------------------------------------------------- 


-- Add Other Components here
-------------------------------------------------------------------

	
-- Create any signals to be used
------------------------------------------------------------------- 
 
  
 TYPE STATE_NAMES IS (S0, S1, S2, S3, S4);   -- list all the STATE_NAMES values

 SIGNAL current_state, next_state	:  STATE_NAMES;     	-- signals of type STATE_NAMES
 
 SIGNAL EXTENDER_UP_DOWN : std_logic := 0;
 
 -- Here the circuit begins

 BEGIN
 
 PROCESS (clk_input) IS
 BEGIN
	IF (falling_edge(extender_toggle) AND (current_state = s0 or current_state = s3) THEN
				EXTENDER_UP_DOWN <= not EXTENDER_UP_DOWN;
	END IF;
END PROCESS;
 
 --------------------------------------------------------------------------------
 --State Machine:
 --------------------------------------------------------------------------------

 -- REGISTER_LOGIC PROCESS:
 
Register_Section: PROCESS (clk_input, rst_n)  -- this process synchronizes the activity to a clock
BEGIN
	IF (rst_n = '0') THEN
		current_state <= S0;
	ELSIF(rising_edge(clk_input)) THEN
		current_state <= next_State;
	END IF;
END PROCESS;	



-- TRANSITION LOGIC PROCESS

Transition_Section: PROCESS (I0, I1, I2, current_state) 

BEGIN
     CASE current_state IS
          WHEN S0 =>		
				IF(I0='1') THEN
					next_state <= S1;
				ELSE
					next_state <= S0;
				END IF;

         WHEN S1 =>		
					next_state <= S2;

         WHEN S2 =>		
				IF(I0='1') THEN
					next_state <= S6;
				ELSIF(I1='1') THEN
					next_state <= S3;
				ELSE
					next_state <= S2;
				END IF;
				
         WHEN S3 =>		
				IF(I0='1') THEN
					next_state <= S4;
				ELSE
					next_state <= S3;
				END IF;

	WHEN OTHERS =>
               next_state <= S0;
 	END CASE;

 END PROCESS;

-- DECODER SECTION PROCESS (Moore Form)

Decoder_Section: PROCESS (current_state) 

BEGIN
     CASE current_state IS
         WHEN S0 =>		
			output1 <= '1';
			output2 <= '0';
			
         WHEN S1 =>		
			output1 <= '0';
			output2 <= '0';

         WHEN S2 =>		
			output1 <= '0';
			output2 <= '0';
			
         WHEN S3 =>		
			output1 <= '0';
			output2 <= '0';

         WHEN S4 =>		
			output1 <= '0';
			output2 <= '0';

         WHEN S5 =>		
			output1 <= '0';
			output2 <= '0';
				
         WHEN S6 =>		
			output1 <= '0';
			output2 <= '1';
				
         WHEN S7 =>		
			output1 <= '0';
			output2 <= '0';
				
         WHEN others =>		
 			output1 <= '0';
			output2 <= '0';
  END CASE;
 END PROCESS;

 END ARCHITECTURE SM;
